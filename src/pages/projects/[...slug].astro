---
import BackToPrev from "@components/BackToPrev.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import Link from "@components/Link.astro";
import PageLayout from "@layouts/PageLayout.astro";
import { readingTime } from "@lib/utils";
import {
  type CollectionEntry,
  getCollection,
  type InferEntrySchema,
} from "astro:content";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content } = await project.render();

type URLWithName = {
  name: string;
  url: string;
};

const getURLsWithNames = (
  data: InferEntrySchema<"projects">,
): URLWithName[] => {
  const { url, demoURL, repoURL } = data;
  const urlByName: Record<string, string | undefined> = {
    link: url,
    demo: demoURL,
    repo: repoURL,
  };

  return Object.entries(urlByName)
    .filter(([_, url]) => url !== undefined)
    .map(([name, url]) => ({ name, url: url! }));
};
---

<PageLayout title={project.data.title} description={project.data.description}>
  <Container>
    <div class="animate">
      <BackToPrev href="/projects"> Back to projects </BackToPrev>
    </div>
    <div class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)}
        </div>
      </div>
      <div class="animate text-2xl font-semibold text-black dark:text-white">
        {project.data.title}
      </div>
      <nav class="animate flex gap-1">
        {
          getURLsWithNames(project.data)
            .map(({ url, name }) => (
              <Link href={url} external>
                {name}
              </Link>
            ))
            .flatMap((link) => [link, <span>/</span>])
            .slice(0, -1)
        }
      </nav>
    </div>
    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>
